From 86391f7cb7f13e0475766b1ee9c2beb1bcb3f6bd Mon Sep 17 00:00:00 2001
From: Michele Castrovilli <michele.castrovilli@unito.it>
Date: Tue, 13 Feb 2024 11:20:33 +0100
Subject: [PATCH] SlackCheck

---
 include/trace/events/rv.h              |  12 +
 kernel/trace/rv/Kconfig                |   7 +
 kernel/trace/rv/Makefile               |   1 +
 kernel/trace/rv/monitors/timed/timed.c | 751 +++++++++++++++++++++++++
 kernel/trace/rv/monitors/timed/timed.h |  54 ++
 5 files changed, 825 insertions(+)
 create mode 100644 kernel/trace/rv/monitors/timed/timed.c
 create mode 100644 kernel/trace/rv/monitors/timed/timed.h

diff --git a/include/trace/events/rv.h b/include/trace/events/rv.h
index 56592da9301c..f8d8b827d17c 100644
--- a/include/trace/events/rv.h
+++ b/include/trace/events/rv.h
@@ -66,6 +66,17 @@ DEFINE_EVENT(error_da_monitor, error_wip,
 	     TP_PROTO(char *state, char *event),
 	     TP_ARGS(state, event));
 #endif /* CONFIG_RV_MON_WIP */
+
+#ifdef CONFIG_RV_MON_TIMED
+DEFINE_EVENT(event_da_monitor, event_timed,
+	    TP_PROTO(char *state, char *event, char *next_state, bool final_state),
+	    TP_ARGS(state, event, next_state, final_state));
+
+DEFINE_EVENT(error_da_monitor, error_timed,
+	     TP_PROTO(char *state, char *event),
+	     TP_ARGS(state, event));
+#endif /* CONFIG_RV_MON_TIMED */
+
 #endif /* CONFIG_DA_MON_EVENTS_IMPLICIT */
 
 #ifdef CONFIG_DA_MON_EVENTS_ID
@@ -137,6 +148,7 @@ DEFINE_EVENT(error_da_monitor_id, error_wwnr,
 #endif /* CONFIG_DA_MON_EVENTS_ID */
 #endif /* _TRACE_RV_H */
 
+
 /* This part ust be outside protection */
 #undef TRACE_INCLUDE_PATH
 #include <trace/define_trace.h>
diff --git a/kernel/trace/rv/Kconfig b/kernel/trace/rv/Kconfig
index 831779607e84..c77789ad27b6 100644
--- a/kernel/trace/rv/Kconfig
+++ b/kernel/trace/rv/Kconfig
@@ -38,6 +38,13 @@ config RV_MON_WIP
 	  For further information, see:
 	    Documentation/trace/rv/monitor_wip.rst
 
+config RV_MON_TIMED
+	depends on RV
+	select DA_MON_EVENTS_IMPLICIT
+	bool "timed monitor"
+	help
+	  Test monitor for a possible timed automata.
+
 config RV_MON_WWNR
 	depends on RV
 	select DA_MON_EVENTS_ID
diff --git a/kernel/trace/rv/Makefile b/kernel/trace/rv/Makefile
index 963d14875b45..39bd0822df66 100644
--- a/kernel/trace/rv/Makefile
+++ b/kernel/trace/rv/Makefile
@@ -3,6 +3,7 @@
 obj-$(CONFIG_RV) += rv.o
 obj-$(CONFIG_RV_MON_WIP) += monitors/wip/wip.o
 obj-$(CONFIG_RV_MON_WWNR) += monitors/wwnr/wwnr.o
+obj-$(CONFIG_RV_MON_TIMED) += monitors/timed/timed.o
 obj-$(CONFIG_RV_REACTORS) += rv_reactors.o
 obj-$(CONFIG_RV_REACT_PRINTK) += reactor_printk.o
 obj-$(CONFIG_RV_REACT_PANIC) += reactor_panic.o
diff --git a/kernel/trace/rv/monitors/timed/timed.c b/kernel/trace/rv/monitors/timed/timed.c
new file mode 100644
index 000000000000..e3d83a6dc79b
--- /dev/null
+++ b/kernel/trace/rv/monitors/timed/timed.c
@@ -0,0 +1,751 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/ftrace.h>
+#include <linux/tracepoint.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/rv.h>
+#include <linux/proc_fs.h>
+#include <linux/kfifo.h>
+#include <rv/instrumentation.h>
+#include <rv/da_monitor.h>
+
+#define MODULE_NAME "timed"
+
+#define PATH_SIZE 1024
+#define LATENCY_SIZE 21
+#define ALPHA_NUM_SIZE 21
+#define ALPHA_DEN_SIZE 21
+#define PID_SIZE 21
+#define CHECK_ALL_SIZE 2
+#define PROC_FILENAME_PATH "rv_timed_proc_filename"
+#define PROC_LATENCY_PATH  "rv_timed_latency_ns"
+#define PROC_RATE_NUM_PATH "rv_timed_rate_num"
+#define PROC_RATE_DEN_PATH "rv_timed_rate_den"
+#define PROC_PID_PATH "rv_timed_proc_pid"
+#define PROC_CHECK_ALL_PATH "rv_timed_check_all"
+
+#define PROC_FIFO_PATH "rv_timed_fifo"
+#define RV_FIFO_SIZE 128
+
+#include <trace/events/sched.h>
+#include <trace/events/rv.h>
+
+/*
+ * This is the self-generated part of the monitor. Generally, there is no need
+ * to touch this section.
+ */
+#include "timed.h"
+
+/*
+ * Declare the deterministic automata monitor.
+ *
+ * The rv monitor reference is needed for the monitor declaration.
+ */
+static struct rv_monitor rv_timed;
+DECLARE_DA_MON_GLOBAL(timed, unsigned char);
+
+/*
+ * This is the instrumentation part of the monitor.
+ *
+ * This is the section where manual work is required. Here the kernel events
+ * are translated into model's event.
+ *
+ */
+
+static struct rv_timed_struct {
+	u64 ts_sched_out;
+	u64 ts_sched_in;
+	u64 alpha_num;
+	u64 alpha_den;
+	u64 delta;
+	s64 slack;
+	bool running;
+	pid_t pid;
+	bool check_all;
+} rv_timed_struct;
+
+struct rv_timed_file {
+	char *content;
+	int length;
+};
+
+static struct rv_timed_file rv_timed_latency;
+static struct rv_timed_file rv_timed_rate_numerator;
+static struct rv_timed_file rv_timed_rate_denominator;
+static struct rv_timed_file rv_timed_filename_proc;
+static struct rv_timed_file rv_timed_pid_proc;
+static struct rv_timed_file rv_timed_check_all;
+
+struct kfifo_rec_ptr_1 rv_fifo;
+
+struct proc_dir_entry *proc;
+
+static void disable_timed(void);
+
+#define rv_timed_get_struct() \
+	&rv_timed_struct
+
+static __always_inline void reset_monitor(void)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	s->pid = -1;
+	s->running = false;
+	s->ts_sched_out = 0;
+	s->ts_sched_in = 0;
+	s->check_all = false;
+}
+
+/**
+ * handle_fork - records the start of the observed process
+ *
+ * Watches the sched_process_exec kernel events for a process with a certain
+ * filename, and records its PID.
+ */
+static void handle_fork(void *data, struct task_struct *p, pid_t old_pid, struct linux_binprm *bprm)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (strcmp(bprm->filename, rv_timed_filename_proc.content) == 0) {
+		s->pid = p->pid;
+		pr_info("SlackCheck: START PID %d\n", s->pid);
+		da_handle_event_timed(fork_timed);
+	}
+}
+
+/**
+ * rv_timed_update_in - updates the automata information at a SCHED_IN event
+ *
+ * Updates both the timestamp for the last sched in event, and the relative
+ * slack calculated from the previous value.
+ */
+static void rv_timed_update_in(u64 current_time)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+	u64 diff = 0;
+
+	s->ts_sched_in = current_time;
+
+	if (!s->running) {
+		s->running = true;
+		s->ts_sched_out = current_time;
+		s->slack = s->delta; // out_0 = in_0 case
+	} else {
+		if (s->ts_sched_in > s->ts_sched_out)
+			diff = s->ts_sched_in - s->ts_sched_out;
+		else
+			diff = 0;
+
+		s->slack = s->slack - diff;
+	}
+}
+
+
+/**
+ * rv_timed_update_out - updates the automata information at a SCHED_OUT event
+ *
+ * Updates both the timestamp for the last sched out event, and the relative
+ * slack calculated from the previous value.
+ */
+static void rv_timed_update_out(u64 current_time)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+	u64 diff = 0;
+	s64 slack_diff = 0;
+
+	s->ts_sched_out = max(current_time, s->ts_sched_in);
+
+	if (!s->running) {
+		s->running = true;
+		s->ts_sched_in = current_time;  // we consider out_0 this point, as we
+										// could have missed in_0 as an event
+		s->slack = s->delta;
+	} else {
+		diff = s->ts_sched_out > s->ts_sched_in ?
+			s->ts_sched_out - s->ts_sched_in : 0;
+		slack_diff = s->slack + (s64) div64_u64((s->alpha_den-s->alpha_num)*diff,
+			s->alpha_num);	// numerator > 0, as num = 0 would indicate
+							// a flat supply function, therefore the
+							// intersecting point would be at infinity
+		s->slack = min_t(s64, s->delta, slack_diff);
+	}
+}
+
+static void check_slack(u64 current_time)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (!(s->running) && (current_time > s->ts_sched_out + s->slack)) {  // OUT OF TIME
+		pr_info("SlackCheck: %d TIMEOUT BY: %llu ns\n",
+				s->pid, s->slack);
+		pr_info("SlackCheck: TIMEOUT - IN: %llu - OUT: %llu\n", s->ts_sched_in,
+				s->ts_sched_out);
+		da_handle_event_timed(terminate_timed);
+		disable_timed();
+		return;
+	}
+}
+
+/**
+ * handle_sched_switch - monitors the scheduling of the specified process
+ *
+ * Watches for the sched_switch events, recording the timestamps. Calculates
+ * whether the process' supply function follows a certain linear lower bound.
+ */
+static void handle_sched_switch(void *data, bool preempt, struct task_struct *p,
+			  struct task_struct *n, unsigned int prev_state)
+{
+	u64 current_time = ktime_get_boottime_ns();
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (p->pid == s->pid) { // SCHED_OUT event
+		rv_timed_update_out(current_time);
+		pr_info("SlackCheck: OUT: %llu \t SLACK: %lld\n", current_time, s->slack);
+		da_handle_event_timed(sched_out_timed);
+	} else if (n->pid == s->pid) { // SCHED_IN event
+		rv_timed_update_in(current_time);
+		pr_info("SlackCheck: IN: %llu \t SLACK: %lld\n", current_time, s->slack);
+		da_handle_event_timed(sched_in_timed);
+	} else if (s->check_all) {
+		check_slack(current_time);
+	}
+}
+
+/**
+ * handle_terminate - Handles the termination of the specified process
+ *
+ * Watches for sched_process_exit events, filtering on the specified process
+ * PID.
+ */
+static void handle_terminate(void *data, struct task_struct *p)
+{
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (p->pid == s->pid) {
+		pr_info("SlackCheck: END %d\n", s->pid);
+		da_handle_event_timed(terminate_timed);
+		disable_timed();
+	}
+}
+
+static int enable_timed(void)
+{
+	int retval;
+
+	retval = da_monitor_init_timed();
+	if (retval)
+		return retval;
+
+	reset_monitor();
+
+	rv_attach_trace_probe("timed", sched_process_exec, handle_fork);
+	rv_attach_trace_probe("timed", sched_switch, handle_sched_switch);
+	rv_attach_trace_probe("timed", sched_process_exit, handle_terminate);
+
+	return 0;
+}
+
+static void disable_timed(void)
+{
+	rv_timed.enabled = 0;
+
+	reset_monitor();
+
+	rv_detach_trace_probe("timed", sched_process_exec, handle_fork);
+	rv_detach_trace_probe("timed", sched_switch, handle_sched_switch);
+	rv_detach_trace_probe("timed", sched_process_exit, handle_terminate);
+
+	da_monitor_destroy_timed();
+}
+
+/*
+ * This is the monitor register section.
+ */
+static struct rv_monitor rv_timed = {
+	.name = "timed",
+	.description = "module for SlackCheck",
+	.enable = enable_timed,
+	.disable = disable_timed,
+	.reset = da_monitor_reset_all_timed,
+	.enabled = 0,
+};
+
+/*
+ * MONITOR FILENAME PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_filename_read_data(struct file *filp,
+	char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_filename_proc.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_filename_proc.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_filename_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	char *data = pde_data(file_inode(filp));
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_filename_proc.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops = {
+	.proc_read  = timed_monitor_filename_read_data,
+	.proc_write = timed_monitor_filename_write_data,
+};
+
+/*
+ * MONITOR LATENCY/DELTA PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_latency_read_data(struct file *filp, char __user *user_buf, size_t count,
+					loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_latency.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_latency.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_latency_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	long long res;
+	int err;
+	char *data = pde_data(file_inode(filp));
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	err = kstrtoll_from_user(user_buf, count, 10, &res);
+	if (err)
+		return err;
+
+	if (res < 100)
+		return -EINVAL;
+
+	s->delta = res;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_latency.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops_latency = {
+	.proc_read   = timed_monitor_latency_read_data,
+	.proc_write  = timed_monitor_latency_write_data,
+};
+
+/*
+ * MONITOR RATE/ALPHA NUMERATOR PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_rate_num_read_data(struct file *filp, char __user *user_buf,
+	size_t count, loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_rate_numerator.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_rate_numerator.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_rate_num_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	long long res;
+	int err;
+	char *data = pde_data(file_inode(filp));
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	err = kstrtoll_from_user(user_buf, count, 10, &res);
+	if (err)
+		return err;
+
+	if (res < 1)
+		return -EINVAL;
+
+	if (res > s->alpha_den)
+		return -EINVAL;
+
+	s->alpha_num = res;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_rate_numerator.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops_rate_num = {
+	.proc_read   = timed_monitor_rate_num_read_data,
+	.proc_write  = timed_monitor_rate_num_write_data,
+};
+
+/*
+ * MONITOR RATE/ALPHA DENOMINATOR PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_rate_den_read_data(struct file *filp, char __user *user_buf, size_t count,
+					loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_rate_denominator.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_rate_denominator.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_rate_den_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	long long res;
+	int err;
+	char *data = pde_data(file_inode(filp));
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	err = kstrtoll_from_user(user_buf, count, 10, &res);
+	if (err)
+		return err;
+
+	if (res < 1)
+		return -EINVAL;
+
+	if (res < s->alpha_num)
+		return -EINVAL;
+
+	s->alpha_den = res;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_rate_denominator.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops_rate_den = {
+	.proc_read   = timed_monitor_rate_den_read_data,
+	.proc_write  = timed_monitor_rate_den_write_data,
+};
+
+/*
+ * MONITOR PID WRITING PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_pid_read_data(struct file *filp, char __user *user_buf, size_t count,
+					loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_pid_proc.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_pid_proc.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_pid_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	long long res;
+	int err;
+	char *data = pde_data(file_inode(filp));
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	err = kstrtoll_from_user(user_buf, count, 10, &res);
+	if (err)
+		return err;
+
+	if (res < 0)
+		return -EINVAL;
+
+	s->pid = res;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_pid_proc.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops_pid = {
+	.proc_read   = timed_monitor_pid_read_data,
+	.proc_write  = timed_monitor_pid_write_data,
+};
+
+/*
+ * MONITOR CHECK ALL WRITING PROC FUNCTIONS
+ */
+
+static ssize_t timed_monitor_ca_read_data(struct file *filp, char __user *user_buf, size_t count,
+					loff_t *ppos)
+{
+	int err;
+	char *data = pde_data(file_inode(filp));
+
+	if ((int) (*ppos) > rv_timed_check_all.length)
+		return 0;
+
+	if (count == 0)
+		return 0;
+
+	count = rv_timed_check_all.length + 1;
+	err = copy_to_user(user_buf, data, count);
+	*ppos = count;
+
+	return count;
+}
+
+static ssize_t timed_monitor_ca_write_data(struct file *filp, const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	long long res;
+	int err;
+	char *data = pde_data(file_inode(filp));
+	struct rv_timed_struct *s = rv_timed_get_struct();
+
+	if (count > PATH_SIZE)
+		return -EFAULT;
+
+	err = kstrtoll_from_user(user_buf, count, 10, &res);
+	if (err)
+		return err;
+
+	if (res < 0 || res > 1)
+		return -EINVAL;
+
+	s->check_all = (bool) res;
+
+	if (copy_from_user(data, user_buf, count))
+		return -EFAULT;
+
+	data[count-1] = '\0';
+	rv_timed_check_all.length = count - 1;
+	return count;
+}
+
+const struct proc_ops proc_fops_ca = {
+	.proc_read   = timed_monitor_ca_read_data,
+	.proc_write  = timed_monitor_ca_write_data,
+};
+
+/*
+ * MONITOR FIFO WRITING PROC FUNCTIONS
+ */
+
+static ssize_t rv_fifo_write(struct file *file, const char __user *buf,
+						size_t count, loff_t *ppos)
+{
+	return -EPERM;
+}
+
+static ssize_t rv_fifo_read(struct file *file, char __user *buf,
+						size_t count, loff_t *ppos)
+{
+	int ret;
+	unsigned int copied;
+
+	ret = kfifo_to_user(&rv_fifo, buf, count, &copied);
+
+	if (ret)
+		return ret;
+
+	return copied;
+}
+
+static const struct proc_ops fifo_proc_ops = {
+	.proc_read	= rv_fifo_read,
+	.proc_write	= rv_fifo_write,
+	.proc_lseek	= noop_llseek,
+};
+
+/*
+ * MONITOR CREATION FUNCTIONS
+ */
+
+int create_new_proc_entry(void)
+{
+	char *DATA = "./test_counter";
+	char *LATENCY = "1000000";
+	char *ALPHA_NUM = "1";
+	char *ALPHA_DEN = "2";
+	char *PID = "-1";
+	char *CHECK_ALL = "0";
+	struct rv_timed_struct *s = rv_timed_get_struct();
+	int ret;
+
+	s->delta = 1000000;
+	s->alpha_num = 1;
+	s->alpha_den = 2;
+	s->pid = -1;
+	s->check_all = false;
+
+	rv_timed_filename_proc.length = strlen(DATA);
+	rv_timed_latency.length = strlen(LATENCY);
+	rv_timed_rate_numerator.length = strlen(ALPHA_NUM);
+	rv_timed_rate_denominator.length = strlen(ALPHA_DEN);
+	rv_timed_pid_proc.length = strlen(PID);
+	rv_timed_check_all.length = strlen(CHECK_ALL);
+
+	rv_timed_filename_proc.content = kmalloc((size_t) PATH_SIZE, GFP_KERNEL);
+	rv_timed_latency.content = kmalloc((size_t) LATENCY_SIZE, GFP_KERNEL);
+	rv_timed_rate_numerator.content = kmalloc((size_t) ALPHA_NUM_SIZE, GFP_KERNEL);
+	rv_timed_rate_denominator.content = kmalloc((size_t) ALPHA_DEN_SIZE, GFP_KERNEL);
+	rv_timed_pid_proc.content = kmalloc((size_t) PID_SIZE, GFP_KERNEL);
+	rv_timed_check_all.content = kmalloc((size_t) CHECK_ALL_SIZE, GFP_KERNEL);
+
+	ret = kfifo_alloc(&rv_fifo, RV_FIFO_SIZE, GFP_KERNEL);
+	if (ret) {
+		pr_err("SlackCheck: error on allocating kfifo\n");
+		return ret;
+	}
+
+	if (rv_timed_filename_proc.content == NULL ||
+		rv_timed_latency.content == NULL ||
+		rv_timed_rate_numerator.content == NULL ||
+		rv_timed_rate_denominator.content == NULL ||
+		rv_timed_pid_proc.content == NULL ||
+		rv_timed_check_all.content == NULL
+		)
+		return -1;
+
+	strscpy(rv_timed_filename_proc.content, DATA, rv_timed_filename_proc.length+1);
+	strscpy(rv_timed_latency.content, LATENCY, rv_timed_latency.length+1);
+	strscpy(rv_timed_rate_numerator.content, ALPHA_NUM, rv_timed_rate_numerator.length+1);
+	strscpy(rv_timed_rate_denominator.content, ALPHA_DEN, rv_timed_rate_denominator.length+1);
+	strscpy(rv_timed_pid_proc.content, PID, rv_timed_pid_proc.length+1);
+	strscpy(rv_timed_check_all.content, CHECK_ALL, rv_timed_check_all.length+1);
+
+	proc = proc_create_data(PROC_FILENAME_PATH, 0644, NULL, &proc_fops,
+			rv_timed_filename_proc.content);
+	if (!proc)
+		return -1;
+	proc = proc_create_data(PROC_LATENCY_PATH, 0644, NULL, &proc_fops_latency,
+			rv_timed_latency.content);
+	if (!proc)
+		return -1;
+	proc = proc_create_data(PROC_RATE_NUM_PATH, 0644, NULL, &proc_fops_rate_num,
+			rv_timed_rate_numerator.content);
+	if (!proc)
+		return -1;
+	proc = proc_create_data(PROC_RATE_DEN_PATH, 0644, NULL, &proc_fops_rate_den,
+			rv_timed_rate_denominator.content);
+	if (!proc)
+		return -1;
+	proc = proc_create_data(PROC_PID_PATH, 0644, NULL, &proc_fops_pid, rv_timed_pid_proc.content);
+	if (!proc)
+		return -1;
+	proc = proc_create_data(PROC_CHECK_ALL_PATH, 0644, NULL, &proc_fops_ca,
+			rv_timed_check_all.content);
+	if (!proc)
+		return -1;
+
+	if (proc_create(PROC_FIFO_PATH, 0444, NULL, &fifo_proc_ops) == NULL) {
+		kfifo_free(&rv_fifo);
+		return -1;
+	}
+
+	return 0;
+}
+
+
+static int __init register_timed(void)
+{
+	if (create_new_proc_entry())
+		return -1;
+
+	rv_register_monitor(&rv_timed);
+	return 0;
+}
+
+static void __exit unregister_timed(void)
+{
+	rv_unregister_monitor(&rv_timed);
+	remove_proc_entry(PROC_FILENAME_PATH, NULL);
+	remove_proc_entry(PROC_LATENCY_PATH, NULL);
+	remove_proc_entry(PROC_RATE_NUM_PATH, NULL);
+	remove_proc_entry(PROC_RATE_DEN_PATH, NULL);
+	remove_proc_entry(PROC_PID_PATH, NULL);
+	remove_proc_entry(PROC_CHECK_ALL_PATH, NULL);
+	remove_proc_entry(PROC_FIFO_PATH, NULL);
+	kfifo_free(&rv_fifo);
+}
+
+module_init(register_timed);
+module_exit(unregister_timed);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Michele Castrovilli");
+MODULE_DESCRIPTION("timed");
diff --git a/kernel/trace/rv/monitors/timed/timed.h b/kernel/trace/rv/monitors/timed/timed.h
new file mode 100644
index 000000000000..769fa1fc55fd
--- /dev/null
+++ b/kernel/trace/rv/monitors/timed/timed.h
@@ -0,0 +1,54 @@
+/*
+ * Automatically generated C representation of timed automaton
+ * For further information about this format, see kernel documentation:
+ *   Documentation/trace/rv/deterministic_automata.rst
+ */
+
+enum states_timed {
+	not_started_timed = 0,
+	ready_timed,
+	running_timed,
+	terminated_timed,
+	state_max_timed
+};
+
+#define INVALID_STATE state_max_timed
+
+enum events_timed {
+	fork_timed = 0,
+	sched_in_timed,
+	sched_out_timed,
+	terminate_timed,
+	event_max_timed
+};
+
+struct automaton_timed {
+	char *state_names[state_max_timed];
+	char *event_names[event_max_timed];
+	unsigned char function[state_max_timed][event_max_timed];
+	unsigned char initial_state;
+	bool final_states[state_max_timed];
+};
+
+static const struct automaton_timed automaton_timed = {
+	.state_names = {
+		"not_started",
+		"ready",
+		"running",
+		"terminated"
+	},
+	.event_names = {
+		"fork",
+		"sched_in",
+		"sched_out",
+		"terminate"
+	},
+	.function = {
+		{         ready_timed,       INVALID_STATE,       INVALID_STATE,       INVALID_STATE },
+		{       INVALID_STATE,       running_timed,       INVALID_STATE,    terminated_timed },
+		{       INVALID_STATE,       INVALID_STATE,         ready_timed,    terminated_timed },
+		{       INVALID_STATE,       INVALID_STATE,       INVALID_STATE,       INVALID_STATE },
+	},
+	.initial_state = not_started_timed,
+	.final_states = { 0, 0, 0, 1 },
+};
-- 
2.45.0

